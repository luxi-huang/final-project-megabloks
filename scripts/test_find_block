#!/usr/bin/env python

"""
New_find_block: robot use pick and place position to assemble the block

PUBLISHERS:
  + /move_group/display_planned_path (moveit_msgs.msg.DisplayTrajectory) ~ publish the robot moving trajectory to control the robot motion

SERVICE:
  + /blocks/next_pickup (GetBlockPosition) ~ let the computer vision know when it is ready to get block positon, and read the block positon from computer vision.

"""
import sys
import copy
import rospy
import numpy as np

from blocks.srv import GetBlockPosition

import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list

import baxter_interface
import tf

from cv_bridge import CvBridge, CvBridgeError
import rospkg
from pixel_frame_transform import*
from sensor_msgs.msg import Image

class find_block(object):
    def __init__(self):
        rospy.wait_for_service('/blocks/next_pickup')
        self.model_coords = rospy.ServiceProxy('/blocks/next_pickup',GetBlockPosition)
        joint_state_topic = ['joint_states:=/robot/joint_states']
        rospy.init_node('find_block',anonymous=True)
        moveit_commander.roscpp_initialize(joint_state_topic)
        moveit_commander.roscpp_initialize(sys.argv)
        robot = moveit_commander.RobotCommander()
        group_name = 'left_arm'
        group_name1 = 'right_arm'
        group = moveit_commander.MoveGroupCommander(group_name)
        group1 = moveit_commander.MoveGroupCommander(group_name1)

        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)

        print "============ Printing robot state"
        print robot.get_current_state()
        print ""

        self.robot = robot
        self.group = group
        self.group1 = group1
        self._gripper = baxter_interface.Gripper("left", baxter_interface.CHECK_VERSION)
        self._gripper.set_dead_band(0.25)


        rospack = rospkg.RosPack()
        rospack.list()
        smiley_face_image = cv2.imread(rospack.get_path('blocks')+'/images/smiley.png')

        self.bridge = CvBridge()
        self.smiley_face = self.bridge.cv2_to_imgmsg(smiley_face_image, encoding="passthrough")
        self.head_display = rospy.Publisher("/robot/xdisplay", Image, queue_size = 1)

    def go_to_pose_goal(self,position,orientation, value):
        group = self.group
        if value == 1:
            """ go to pick position """
            pose_goal = geometry_msgs.msg.Pose()
            pose_goal.orientation.x = orientation[0]
            pose_goal.orientation.y = orientation[1]
            pose_goal.orientation.z = orientation[2]
            pose_goal.orientation.w = orientation[3]
            pose_goal.position.x = position[0]
            pose_goal.position.y = position[1]
            pose_goal.position.z = position[2]
        else :
            """ go to place position"""
            pose_goal = group.get_current_pose().pose
            get_orientation = np.array([pose_goal.orientation.x,pose_goal.orientation.y,pose_goal.orientation.z,pose_goal.orientation.w])
            current_orientation = tf.transformations.euler_from_quaternion(get_orientation) # 1.57079632
            sign =1
            quaternion = tf.transformations.quaternion_from_euler(-np.pi,0,orientation[0]*sign) # 1.57079632
            pose_goal.orientation.x = quaternion[0]
            pose_goal.orientation.y = quaternion[1]
            pose_goal.orientation.z = quaternion[2]
            pose_goal.orientation.w = quaternion[3]

        group.set_pose_target(pose_goal)
        plan = group.go(wait=True)
        group.stop()
        group.clear_pose_targets()


    def plan_cartesian_path(self,place_block_position,value,scale=1):
        waypoints = []

        if value == 1:
            group = self.group
            wpose = group.get_current_pose().pose
            """ go -z direction for right arm """
            wpose.position.z += scale * 0.1
        elif value == 2:
            group = self.group
            wpose = group.get_current_pose().pose
            """ go +z direction for right arm"""
            wpose.position.z -= scale * 0.1
        elif value == 3:
            group = self.group
            wpose = group.get_current_pose().pose
            """go in x and y direction  for right arm """
            y_distance = place_block_position[0][1]- wpose.position.y
            x_distance = place_block_position[0][0]- wpose.position.x
            wpose.position.y -= scale * y_distance  # move towards right "-",
            wpose.position.x -= scale * x_distance
        elif value == 4:
            group = self.group
            wpose = group.get_current_pose().pose
            """ This cartesian_plan find the difference Z of place and pick positions for right arm """
            z_distance = place_block_position[0][2]- wpose.position.z
            wpose.position.z -= scale * z_distance  # First move down (z)
        elif value == 5:
            """ move right arm away """
            group = self.group1
            wpose = group.get_current_pose().pose
            y_distance = 0.4
            x_distance = 0.15
            wpose.position.y += scale * y_distance  # move towards right "-",
            wpose.position.x += scale * x_distance
        elif value == 6:
            """ move right arm back """
            group = self.group1
            wpose = group.get_current_pose().pose
            y_distance = 0.4
            x_distance = 0.15
            wpose.position.y -= scale * y_distance  # move towards right "-",
            wpose.position.x -= scale * x_distance
        elif value == 7:
            """ move left arm away """
            group = self.group
            wpose = group.get_current_pose().pose
            y_distance = 0.3
            x_distance = 0.3
            wpose.position.y -= scale * y_distance  # move towards right "-",
            wpose.position.x += scale * x_distance

        waypoints.append(copy.deepcopy(wpose))
        (plan, fraction) = group.compute_cartesian_path(
                                           waypoints,   # waypoints to follow
                                           0.01,        # eef_step
                                           0.0)         # jump_threshold
        return plan, fraction



    def execute_plan(self,plan,value):
        if value == 1 :
            group = self.group
            group.execute(plan, wait=True)
        else:
            group1 = self.group1
            group1.execute(plan, wait=True)

    def gripper_control(self, value):
        if value == 0:
            self._gripper.close()
            resulting_force = self._gripper.force()
            return resulting_force
        elif value == 1:
             self._gripper.open()


    def force_control(self,reset):
        current_force = self._gripper.parameters()['moving_force']
        print("current force {}" .format(current_force))
        offset = 40.0

        if reset == 1:
            a = 10.0
            holdforce = 40.0
        else:
            a = current_force + offset
            holdforce = 50.0

        self._gripper.set_holding_force(holdforce)
        self._gripper.set_moving_force(a)
        current_force = self._gripper.parameters()['moving_force']
        dead_zone = self._gripper.parameters()['dead_zone']
        holding_force = self._gripper.parameters()['holding_force']

        print("holding_force {}" .format(holding_force))
        print("new_current force {}" .format(current_force))
        print(" dead_zone {}" .format(dead_zone))

    def pick_and_place(self, pick_block_position, place_block_position):


        print "============ Press `Enter` to move away right arm..."
        raw_input()
        cartesian_plan, fraction = self.plan_cartesian_path(0,5,scale=-1)
        self.execute_plan(cartesian_plan,0)
        """ go above pick position """
        rospy.sleep(2)
        self.force_control(1)
        pick_position1 = copy.copy(pick_block_position[0])
        pick_position1[2] = pick_position1[2]+0.1
        pick_orientation_1 = copy.copy(pick_block_position[1])
        self.go_to_pose_goal(pick_position1,pick_orientation_1,1)
        """go down """
        rospy.sleep(2)
        cartesian_plan, fraction = self.plan_cartesian_path(0,1,scale=-1)
        self.execute_plan(cartesian_plan,1)
        """close gripper """
        rospy.sleep(2)
        gripper_force = self.gripper_control(0)
        rospy.sleep(2)
        """go up """
        cartesian_plan, fraction = self.plan_cartesian_path(0,2,scale=-1)
        self.execute_plan(cartesian_plan,1)
        rospy.sleep(2)
        """go x and y position tarward the position to drop box"""
        cartesian_plan, fraction = self.plan_cartesian_path(place_block_position,3,scale=-1)
        self.execute_plan(cartesian_plan,1)
        rospy.sleep(1)
        """go above place position """
        place_orientation_1 = copy.copy(place_block_position[1])
        self.go_to_pose_goal(0,place_orientation_1,0)
        """go vertical  and add force"""
        rospy.sleep(3)
        self.force_control(0)
        cartesian_plan, fraction = self.plan_cartesian_path(place_block_position,4,scale=-1)
        self.execute_plan(cartesian_plan,1)
        """ open the gripper """
        self.force_control(1)
        rospy.sleep(5)
        self.gripper_control(1)
        """go up"""
        rospy.sleep(2)
        cartesian_plan, fraction = self.plan_cartesian_path(0,2,scale=-1)
        self.execute_plan(cartesian_plan,1)
        rospy.sleep(2)
        """close gripper  """
        gripper_force1= self.gripper_control(0)
        print('gripper_force {}' .format(gripper_force1))
        self.force_control(0)
        rospy.sleep(2)
        """go down """
        cartesian_plan, fraction = self.plan_cartesian_path(0,1,scale=-1)
        self.execute_plan(cartesian_plan,1)
        rospy.sleep(5)
        """to go up """
        cartesian_plan, fraction = self.plan_cartesian_path(0,2,scale=-1)
        self.execute_plan(cartesian_plan,1)
        self.force_control(1)
        self.gripper_control(1)
        """move away left arm"""
        cartesian_plan, fraction = self.plan_cartesian_path(0,7,scale=-1)
        self.execute_plan(cartesian_plan,1)
        """move right arm back"""
        cartesian_plan, fraction = self.plan_cartesian_path(0,6,scale=-1)
        self.execute_plan(cartesian_plan,0)
        rospy.sleep(3)


    def pick_position_srv(self,sign):
        gripper_offset_x = 0 #0.02
        gripper_offset_y = -0.01 #0.01

        check = 0
        while check == 0:
            block_positions = self.model_coords()
            if block_positions.block_pose.x < 0.65:
                check = 1

        print ("pick_position{}" .format(block_positions))
        if block_positions.block_pose.theta == 1:
            block_positions.block_pose.theta = -np.pi/2*sign
        else:
            block_positions.block_pose.theta = np.pi


        orientation = tf.transformations.quaternion_from_euler(-np.pi,0,block_positions.block_pose.theta) # 1.57079632
        print("orientation{}" .format(orientation))

        pose_goal = [[0,0,0],[0,0,0,0]]
        pose_goal[0][0] = block_positions.block_pose.x + gripper_offset_x
        pose_goal[0][1] = block_positions.block_pose.y + gripper_offset_y
        pose_goal[0][2] = self.pick_block_height

        pose_goal[1][0] = orientation[0]
        pose_goal[1][1]= orientation[1]
        pose_goal[1][2] = orientation[2]
        pose_goal[1][3] = orientation[3]

        return sign, pose_goal


    def get_place_position(self):
        table_offset = -0.0002
        # get block position x, y and rotation angle
        block_positions = rospy.get_param("tower")
        sign = 1

        x_offset = 0.11
        for i in range (len(block_positions)):
            if block_positions[i][2] == 1:
                block_positions[i][2] = np.pi/2 #*sign
                #sign *=-1
            else:
                if i == 1:
                    block_positions[i][2] = 0
                block_positions[i][2] = np.pi

        block_position1 = block_positions[0]
        block_position2 = block_positions[1]
        block_position3 = block_positions[2]

        print("block_position1{}" .format(block_position1))
        print("block_position2{}" .format(block_position2))
        print("block_position3{}" .format(block_position3))

        place_block_position1 = [[block_position1[0]-x_offset+0.002-0.0006,block_position1[1],-0.20764+table_offset],[block_position1[2]]]
        place_block_position2 = [[block_position2[0]-x_offset-0.015 ,block_position2[1],-0.20764+table_offset],[block_position2[2]]]
        place_block_position3 = [[block_position3[0]-x_offset+0.002,block_position3[1],-0.20764+table_offset+0.015],[block_position3[2]]]

        return place_block_position1, place_block_position2, place_block_position3,sign

    def main(self):
        table_offset = 0 #-0.005
        # self.pick_block_height = -0.20764+table_offset
        self.pick_block_height = -0.20764+table_offset

        place_block_position1,place_block_position2,place_block_position3,sign = self.get_place_position()

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position1)

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position2)

        print "============ go to the first block postion..."
        sign,pick_position = self.pick_position_srv(sign)
        rospy.sleep(2)
        self.pick_and_place(pick_position, place_block_position3)
        self.head_display.publish(self.smiley_face)
        rospy.sleep(2)

if __name__ == '__main__':
    try:
        block_loc = find_block()
        block_loc.main()
    except rospy.ROSInterruptException:
        pass
